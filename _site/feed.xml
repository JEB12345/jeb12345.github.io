<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-07-17T12:29:53-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">SUPERball v2 Documentation</title><subtitle>Basic Documentation for my current work on the SUPERball v2 Project.</subtitle><entry><title type="html">Teensy Code Overview</title><link href="http://localhost:4000/2019/07/15/Teensy_Code_SUPERball.html" rel="alternate" type="text/html" title="Teensy Code Overview" /><published>2019-07-15T00:00:22-06:00</published><updated>2019-07-15T00:00:22-06:00</updated><id>http://localhost:4000/2019/07/15/Teensy_Code_SUPERball</id><content type="html" xml:base="http://localhost:4000/2019/07/15/Teensy_Code_SUPERball.html">&lt;blockquote&gt;
  &lt;p&gt;Our source code my be found on GitHub, &lt;a href=&quot;https://github.com/JEB12345/TeensyLC_SBv2&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;teensy-lc&quot;&gt;Teensy LC&lt;/h3&gt;

&lt;p&gt;The Teensy LC is the low cost variant of the Teensy line of microcontrollers from PJRC. It utilizes a 48Mhz ARM Cortex-M0 with multiple pin out for hardware peripherals in a relatively small form factor. More information on the Teensy LC can be found on PJRC’s website &lt;a href=&quot;https://www.pjrc.com/teensy/teensyLC.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Refer to the &lt;a href=&quot;/2019/07/01/Schematic_and_Layout_SUPERball.html&quot;&gt;Schematic and Layout page&lt;/a&gt; for how the Teensy LC chip is electrically integrated into our electronics board.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;features&quot;&gt;Features&lt;/h3&gt;

&lt;p&gt;The Teensy LC is our main real time microcontroller for the main board on SUPERball v2. It’s main processes are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The companion processor to the battery monitor circuit&lt;/li&gt;
  &lt;li&gt;Reading data from our sensor board located lower on SUPERball v2’s rods&lt;/li&gt;
  &lt;li&gt;Reading data from our SOFTBALL pressure sensor&lt;/li&gt;
  &lt;li&gt;Communicating data to the Omega2p through a standard UART connection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code’s main loop runs every 10ms (100Hz), which is limited by the speed of the Teensy 48MHz processor. If this becomes a limitation, the loop speed can be increased. However, 1ms (1kHz) is too fast for the processor and the routines being run.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Currently, not all features have been implemented in code. I will try to update the page as more features are implemented.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;code-environment&quot;&gt;Code Environment&lt;/h3&gt;

&lt;p&gt;The code has been developed using the Teensyduino library (Arduino for Teensy) under the PlatoformIO development environment. This uses the C++ style of the Arduino language and is a bit different in compilation than a standard INO style code.&lt;/p&gt;

&lt;p&gt;Information about PlatoformIO can be found &lt;a href=&quot;https://docs.platformio.org/en/latest/ide/pioide.html&quot;&gt;here&lt;/a&gt;, and the Teensy configuration can be found &lt;a href=&quot;https://docs.platformio.org/en/latest/platforms/teensy.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: that I used the &lt;a href=&quot;https://docs.platformio.org/en/latest/ide/vscode.html#ide-vscode&quot;&gt;Visual Studio Code&lt;/a&gt; variation of PlatformIO. However, any variation of the IDE may be used.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our source code my be found on GitHub, &lt;a href=&quot;https://github.com/JEB12345/TeensyLC_SBv2&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using Arduino and Teensyduino allows for a multitude of open source libraries to be used directly or modified and has sped up development. The libraries used are listed below:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.arduino.cc/reference/en/&quot;&gt;Arduino&lt;/a&gt;/&lt;a href=&quot;https://www.pjrc.com/teensy/teensyduino.html&quot;&gt;Teensyduino&lt;/a&gt;, this provides basic microcontroller functions to all Arduino compatible chips&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.pjrc.com/teensy/td_timing_IntervalTimer.html&quot;&gt;IntervalTimer&lt;/a&gt;, interrupt based library to call a function at some microsecond based interval&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bakercp/PacketSerial&quot;&gt;PacketSerial&lt;/a&gt;, packet-based serial communication using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Consistent_Overhead_Byte_Stuffing&quot;&gt;COBS&lt;/a&gt; encoding format&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.pjrc.com/teensy/td_libs_OctoWS2811.html&quot;&gt;OctoWS2811&lt;/a&gt;, high performance library for various single wire chain-able RGB LEDs&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/LibreSolar/bq769x0_ArduinoLibrary&quot;&gt;bq769x0 Arduino Library (modified)&lt;/a&gt;, This is the original code, however we use a heavily modified variant to support the Teensy’s faster I2C library and CRC checking. Our version is &lt;a href=&quot;https://github.com/JEB12345/TeensyLC_SBv2/blob/master/src/bq769x0CRC.cpp&quot;&gt;packaged with the Project’s source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;timing-loop&quot;&gt;Timing loop&lt;/h3&gt;

&lt;p&gt;As stated earlier, most functions will run at a 10ms (100Hz) timing loop. A simple custom library called &lt;a href=&quot;https://github.com/JEB12345/TeensyLC_SBv2/blob/master/src/timer.cpp&quot;&gt;&lt;strong&gt;timer&lt;/strong&gt;&lt;/a&gt; initializes an &lt;strong&gt;IntervalTimer&lt;/strong&gt; instance and calls a function to increase a counter every 10ms. The main loop of our program then checks to see if the previously saved count is not equal to the current count (set by our interrupt timing function). If valid, then the main loop will run. Functions that should run slower than 10ms (at 10ms intervals) should use a conditional modulo statement on the current 10ms count.&lt;/p&gt;

&lt;p&gt;Below is a sample of our main loop blinking an LED every 500ms:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;cm&quot;&gt;/*
   * Everythin in this if statement will run at 10ms
   * Make sure all tasks take less than 10ms
   * If you want to run something slower than 10ms,
   * create an if statement and modulo systime with
   * the multiple of 10ms delay you want the task to run
   * e.g. if(timer_state.systime % 50 == 0) for a 500ms loop
   */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer_state&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.systime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer_state&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.prev_systime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;noInterrupts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timer_state&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.prev_systime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer_state&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.systime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;interrupts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer_state&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.systime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;// Status LED&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ledState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ledState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;digitalWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ledPin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ledState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/*
   * Put tasks that should run as fast as possible here
   * Limit this to only a few tasks if possible
   */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;serial-communication&quot;&gt;Serial communication&lt;/h3&gt;

&lt;p&gt;Serial communication, specifically two wire &lt;a href=&quot;https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter&quot;&gt;UART&lt;/a&gt;, was chosen as the method to relay data to our Omega2p board since both SPI and I2C had various complications rendering them not as useful as Serial.&lt;/p&gt;

&lt;p&gt;On top of the Serial communication, a &lt;a href=&quot;https://en.wikipedia.org/wiki/Consistent_Overhead_Byte_Stuffing&quot;&gt;COBS&lt;/a&gt; encoding protocol library (PacketSerial) is used to allow for arbitrary length data packets across the asynchronous communication lines. Please refer to the arduino library’s &lt;a href=&quot;https://github.com/bakercp/PacketSerial&quot;&gt;GitHub page&lt;/a&gt; for a good write up on how and why this is used.&lt;/p&gt;

&lt;p&gt;In order to get data from the Teensy, the Omega2p board will send a simple 1 Byte command corresponding to a predetermined data type. The Teensy will then reply with current data for the commanded data type. This is very similar to how most IC sensor chips relay data to a host microcontroller.&lt;/p&gt;

&lt;p&gt;Below are some data commands:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Omega2p Command (1 byte)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data Requested&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Bytes Sent from Teensy&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x01&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Battery Voltage &amp;amp; Current&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4 (2 voltage + 2 current)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x14&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Dummy Command&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0xFF&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Battery Management shutdown&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;As of writing this document, frame work for commands has been setup but only a battery voltage/current data command, BMS shutdown, and a dummy command have been implemented (the actual byte commands are subject to change). I will update the page as new commands are set.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="SBv2" /><category term="Electronics" /><category term="Code" /><summary type="html">Our source code my be found on GitHub, here.</summary></entry><entry><title type="html">Schematic and Layout For Electronics Board Revision 3</title><link href="http://localhost:4000/2019/07/01/Schematic_and_Layout_SUPERball.html" rel="alternate" type="text/html" title="Schematic and Layout For Electronics Board Revision 3" /><published>2019-07-01T09:22:22-06:00</published><updated>2019-07-01T09:22:22-06:00</updated><id>http://localhost:4000/2019/07/01/Schematic_and_Layout_SUPERball</id><content type="html" xml:base="http://localhost:4000/2019/07/01/Schematic_and_Layout_SUPERball.html">&lt;h2 id=&quot;revision-3---teensy-mod&quot;&gt;Revision 3 - Teensy Mod&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;You can find the git repo for SUPERball v2 &lt;a href=&quot;https://github.com/JEB12345/superball_v2_electronics/tree/Onion_Teensy_M0&quot;&gt;here&lt;/a&gt;, which houses the schematics and board files for each version of our custom electronics board. Note that this page refers to the “Onion_Teensy_M0” branch. This may or may not be merged with master at some point in the future.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The project was developed on &lt;a href=&quot;http://www.kicad-pcb.org/&quot;&gt;KiCAD&lt;/a&gt; v6 as of the writing of this document.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the third revision of our electronics board for wireless communication and battery power distribution on SUPERball v2. The first and second boards were design steps which each had different issues that made them unusable on the full system. Below is a 3D rendering of the board generated in KiCAD.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/main_3D_combined.png&quot; alt=&quot;3D Board&quot; title=&quot;Top/Bottom Rendering of SBv2 Electronics Board&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;schematic-overview&quot;&gt;Schematic Overview&lt;/h3&gt;

&lt;p&gt;Below is a simple (and crude) overview of the schematic connections for the electronics board. The main features are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Battery Monitoring using TI’s &lt;a href=&quot;https://www.ti.com/lit/ds/symlink/bq76930.pdf&quot;&gt;&lt;strong&gt;bq76930&lt;/strong&gt;&lt;/a&gt; chip for power and individual cell monitoring of our 6S battery pack&lt;/li&gt;
  &lt;li&gt;Step down power from pack voltage to 5V then from 5V to 3.3V using TI’s &lt;a href=&quot;http://www.ti.com/lit/ds/symlink/lmzm23601.pdf&quot;&gt;&lt;strong&gt;lmzm23601&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://www.ti.com/lit/ds/symlink/lp3965.pdf&quot;&gt;&lt;strong&gt;lp3965&lt;/strong&gt;&lt;/a&gt;, respectively.&lt;/li&gt;
  &lt;li&gt;Main real time communication and processing using a &lt;a href=&quot;https://www.pjrc.com/teensy/teensyLC.html&quot;&gt;&lt;strong&gt;Teensy LC&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Onion’s &lt;a href=&quot;https://docs.onion.io/omega2-docs/omega2p.html&quot;&gt;&lt;strong&gt;Omega2p&lt;/strong&gt;&lt;/a&gt; as our WiFi to Ethernet bridge and ROS node
    &lt;ul&gt;
      &lt;li&gt;Serial to USB communication for debugging for the Omeag2p was based on Omega’s &lt;a href=&quot;https://github.com/OnionIoT/Onion-Hardware/blob/master/Schematics/Omega-Expansion-Dock.pdf&quot;&gt;schematics&lt;/a&gt; using Silicon Labs’ &lt;a href=&quot;http://www.silabs.com/support%20documents/technicaldocs/cp2102n-datasheet.pdf&quot;&gt;&lt;strong&gt;CP2102N&lt;/strong&gt;&lt;/a&gt; chip.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Wireless safety switch utilizing a custom layout of Nordic’s &lt;a href=&quot;https://www.sparkfun.com/datasheets/Components/nRF24L01_prelim_prod_spec_1_2.pdf&quot;&gt;&lt;strong&gt;nRF24L01p&lt;/strong&gt;&lt;/a&gt; chip controlled by a dedicated &lt;a href=&quot;http://ww1.microchip.com/downloads/en/DeviceDoc/SAMD21-Family-DataSheet-DS40001882D.pdf&quot;&gt;&lt;strong&gt;ATSAMD21E&lt;/strong&gt;&lt;/a&gt; M0 micro controller.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/SBv2_Electronics_Diagram.png&quot; alt=&quot;Crude Electrical Diagram&quot; title=&quot;Electrical Diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PDFs of the actual KiCAD schematics can be found in the GitHub repo &lt;a href=&quot;https://github.com/JEB12345/superball_v2_electronics/tree/Onion_Teensy_M0/main_board/PDFs&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;layout-overview&quot;&gt;Layout overview&lt;/h3&gt;

&lt;p&gt;The layout of the board has some unique constraints based on the design of SUPERball v2’s Omni-directional holder and location of the board. The main driving parameter of the Omni-directional holder design was to make a strong an lightweight component, electronic form factor, IC component placement, and mounting were then driven by these design choices. The main constraints driven are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The board must allow for access to the batter compartment, thus a center cutout on the board.&lt;/li&gt;
  &lt;li&gt;All through-hole parts must be mounted on the top (SOFTBALL) side of the board or within the flaired cavities if they are mounted on the bottom, so that they do not interfere with the function of the Omni-directional routers.&lt;/li&gt;
  &lt;li&gt;The SOFTBALL end effector limits the amount the board may extend beyond the Omni-directional holder to 100mm in diameter.&lt;/li&gt;
  &lt;li&gt;At least a 3mm gap is needed between the electronic board’s edge and the Omni-directional holder to allow for a 3D printed cover to seal the electronics from outdoor elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The design of the electronic board layout taking into account these contraints my be seen in the image below. The white outline is a 2D projection of the top of an Omni-directional holder. the yellow is the board outline.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Layout_with_Omni_Outline.png&quot; alt=&quot;full layout&quot; title=&quot;All layers displayed with Omni Holder Outline&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that the board was designed as a 4 layer PCB board with the top and bottom layers as signal layers and the middle two layers as power planes. The first middle layer is positive power and the second is ground.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;top-of-the-board-and-top-layer&quot;&gt;Top of the Board and Top layer&lt;/h3&gt;

&lt;p&gt;The top of the electronics board houses the Omega2p, Teensy LC, nRF24L01P, 2.4 GHz antennas, step down converters for 5 and 3.3 volts, communication connector to the SOFTBALL sensor and String LEDs, as well as the buzzer.&lt;/p&gt;

&lt;p&gt;Technically, the ethernet port is also mounted on this side. However, the port housing goes through a hole in the board and the connection is on the bottom side.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Main_Board_Top_with_Text.png&quot; alt=&quot;Top Render with Text&quot; title=&quot;3D render of electronic board top with Omega and Teensy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some ICs are located under the Omega and Teensy boards, which are shown in the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Main_Board_Top_noOmegaTeensy_with_Text.png&quot; alt=&quot;Top Render noOmegaTeensy with Text&quot; title=&quot;3D render of electronic board top without the Omega and Teensy boards&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Below is a rendering of the actual PCB layout for the top layer with Silkscreen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/layout_top.png&quot; alt=&quot;Top Copper Layer&quot; title=&quot;PCB layout of Top Copper Layer with Top Silkscreen&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;middle-layers&quot;&gt;Middle layers&lt;/h3&gt;

&lt;p&gt;The middle layers going towards the bottom layer from the top are a power plane and a ground plane, respectively, and are shown as such below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/layout_power.png&quot; alt=&quot;Power Plane&quot; title=&quot;PCB layout of Power Plane Copper Layer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/layout_ground.png&quot; alt=&quot;Ground Plane&quot; title=&quot;PCB layout of Ground Plane Copper Layer&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note the missing copper pours around the 2.4 GHz antennas at the end of the board. This is done to prevent noise and reflections from interfering with the wireless signals.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;bottom-of-the-board-and-bottom-layer&quot;&gt;Bottom of the Board and Bottom layer&lt;/h3&gt;

&lt;p&gt;The bottom of the electronics board houses the battery monitor circuit, battery power connector, Hebi power connectors, the entry for the Ethernet connector, sensor board connector, M0 microcontroller with SWD programming connector, as well as a backup 3.3 volt input connector.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Main_Board_Bottom_with_Text.png&quot; alt=&quot;Bottom Render with Text&quot; title=&quot;3D render of electronic board bottom&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The majority of these connectors are grouped to fit within the “flared” openings on the Omni-directional holder, which can be seen in the PCB copper layout render below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/layout_bottom.png&quot; alt=&quot;Bottom Copper Layer&quot; title=&quot;PCB layout of Bottom Copper Layer&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="SBv2" /><category term="Electronics" /><summary type="html">Revision 3 - Teensy Mod You can find the git repo for SUPERball v2 here, which houses the schematics and board files for each version of our custom electronics board. Note that this page refers to the “Onion_Teensy_M0” branch. This may or may not be merged with master at some point in the future.</summary></entry><entry><title type="html">Omega2 Bridging WiFi and Ethernet</title><link href="http://localhost:4000/2019/06/05/Omega2_Briding_WiFi_and_Ethernet.html" rel="alternate" type="text/html" title="Omega2 Bridging WiFi and Ethernet" /><published>2019-06-05T10:34:27-06:00</published><updated>2019-06-05T10:34:27-06:00</updated><id>http://localhost:4000/2019/06/05/Omega2_Briding_WiFi_and_Ethernet</id><content type="html" xml:base="http://localhost:4000/2019/06/05/Omega2_Briding_WiFi_and_Ethernet.html">&lt;blockquote&gt;
  &lt;p&gt;If you have not done so, you need to have the SBv2 custom image loaded onto you Omega2 board. Or at the very least, an image with &lt;b&gt;relayd&lt;/b&gt; installed.
You can find instructions on compiling and loading the custom image &lt;a href=&quot;/2019/06/04/Omega2_Docker_and_Image_Creation.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that these configurations might already be applied to your system if a custom version of our firmware is / was already installed on the Omega2 board. Check the network and wireless files on you system against the final version in this tutorial.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will be editing the Omega2’s configuration files to enable briding between the WiFi and ethernet port.
The files we will be editing are &lt;code class=&quot;highlighter-rouge&quot;&gt;network&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;wireless&lt;/code&gt; located in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/config/&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Please refer to &lt;a href=&quot;https://docs.onion.io/omega2-docs/&quot;&gt;Onion’s Omega2&lt;/a&gt; docs for how to connect to your Omega2 board, commands, and features. I would recommend you connect to the Omega2 through the Command Line interface.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;network-file&quot;&gt;Network File&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;An unmodified network file should look something like this:
&lt;img src=&quot;/assets/img/network_original.png&quot; alt=&quot;original network&quot; title=&quot;original network file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Leave the &lt;code class=&quot;highlighter-rouge&quot;&gt;'loopback'&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;'globals'&lt;/code&gt; configurations and change the rest of the file to look something like this:
&lt;img src=&quot;/assets/img/network_modified.png&quot; alt=&quot;modified network&quot; title=&quot;modified network file&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that you might need to change your &lt;code class=&quot;highlighter-rouge&quot;&gt;gateway&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;dns&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ipaddr&lt;/code&gt; settings to match your network’s settings.
Also, the &lt;code class=&quot;highlighter-rouge&quot;&gt;option hostname &quot;Omega-&quot;&lt;/code&gt; might have a 4 character string. No need to delete it like in the image above.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here are the configurations if you feel like copy and pasting them into your file:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface &lt;span class=&quot;s1&quot;&gt;'lan'&lt;/span&gt;
        option ifname &lt;span class=&quot;s1&quot;&gt;'eth0'&lt;/span&gt;
        option proto &lt;span class=&quot;s1&quot;&gt;'static'&lt;/span&gt;
        option gateway &lt;span class=&quot;s1&quot;&gt;'192.168.0.1'&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Should be your network's default Gateway  &lt;/span&gt;
        option dns &lt;span class=&quot;s1&quot;&gt;'192.168.0.1'&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Should be your network's default Gateway&lt;/span&gt;

config interface &lt;span class=&quot;s1&quot;&gt;'wwan'&lt;/span&gt;
        option ifname &lt;span class=&quot;s1&quot;&gt;'apcli0'&lt;/span&gt;
        option proto &lt;span class=&quot;s1&quot;&gt;'dhcp'&lt;/span&gt;
        option &lt;span class=&quot;nb&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Omega-'&lt;/span&gt;

config interface &lt;span class=&quot;s1&quot;&gt;'stabridge'&lt;/span&gt;
        option proto &lt;span class=&quot;s1&quot;&gt;'relay'&lt;/span&gt;
        option network &lt;span class=&quot;s1&quot;&gt;'lan wwan'&lt;/span&gt;
        option ipaddr &lt;span class=&quot;s1&quot;&gt;'192.168.0.140'&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#TODO: check if this needs to change for each Omega2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;wireless-file-optional&quot;&gt;Wireless File (optional)&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/config/wireless&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;An unmodified wireless file should look something like this:
&lt;img src=&quot;/assets/img/wireless_original.png&quot; alt=&quot;original wireless&quot; title=&quot;original wireless file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you already connected your Omega2 board to a network, then your &lt;code class=&quot;highlighter-rouge&quot;&gt;'sta'&lt;/code&gt; section might already be pre-populated with your network settings.&lt;/p&gt;

&lt;p&gt;If not, then populate your netowrk settings (key and ssid) as well as make sure you change&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;option disable '1'&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;option disable '0'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Your new wireless file should look something like this:
&lt;img src=&quot;/assets/img/wireless_modified.png&quot; alt=&quot;modified wireless&quot; title=&quot;modified wireless file&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note the &lt;code class=&quot;highlighter-rouge&quot;&gt;config wif-config&lt;/code&gt; sections are usually auto generated by the wifi manager. So you might have one or more of these for each different WiFi network you have connected with your Omega2 board.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;enable-relayd&quot;&gt;Enable Relayd&lt;/h3&gt;
&lt;p&gt;Once you have modified the &lt;code class=&quot;highlighter-rouge&quot;&gt;network&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;wireless&lt;/code&gt; files, relayd needs to be enabled.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/etc/init.d/relayd enabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should setup relayd to bridge your WiFi and ethernet port.&lt;/p&gt;

&lt;h3 id=&quot;enable-dnsmasq&quot;&gt;Enable dnsmasq&lt;/h3&gt;
&lt;p&gt;Now you should make sure dnsmasq is enabled&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/etc/init.d/dnsmasq enabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;disable-firewall&quot;&gt;Disable Firewall&lt;/h3&gt;
&lt;p&gt;Once relayd is setup and we have a bridge between our WiFi and ethernet, Hebi feedback messages might not be working. This is due to the Omega2’s firewall blocking traffic.
The easiest way to solve this is to disable the firewall all together.&lt;/p&gt;

&lt;p&gt;The firmware’s startup scripts are located in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/init.d/&lt;/code&gt; and there should be file named &lt;code class=&quot;highlighter-rouge&quot;&gt;firewall&lt;/code&gt;.
Disable this file using the command below:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/etc/init.d/firewall disable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, add these lines to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/rc.local&lt;/code&gt; between the instuctions at the top and &lt;code class=&quot;highlighter-rouge&quot;&gt;exit 0&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;### Start dnsmasq on bootup&lt;/span&gt;
/etc/init.d/dnsmasq start
/etc/init.d/firewall stop
/etc/init.d/dnsmasq restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now if you reboot the Omega2 board, it should startup and allow for Hebi’s feedback messages to transfer over the network.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: The feedback messages will take approximately 85 seconds (or the time for all startup scripts to finish) before they are recognized on the network. So be patient on initial boot up.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="SBv2" /><category term="Omega2" /><summary type="html">If you have not done so, you need to have the SBv2 custom image loaded onto you Omega2 board. Or at the very least, an image with relayd installed. You can find instructions on compiling and loading the custom image here.</summary></entry><entry><title type="html">Omega2 Docker and Image Creation</title><link href="http://localhost:4000/2019/06/04/Omega2_Docker_and_Image_Creation.html" rel="alternate" type="text/html" title="Omega2 Docker and Image Creation" /><published>2019-06-04T13:03:27-06:00</published><updated>2019-06-04T13:03:27-06:00</updated><id>http://localhost:4000/2019/06/04/Omega2_Docker_and_Image_Creation</id><content type="html" xml:base="http://localhost:4000/2019/06/04/Omega2_Docker_and_Image_Creation.html">&lt;p&gt;First you should install Docker. I am using ubuntu 18.04 LTS and installed docker-ce following &lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/ubuntu/&quot;&gt;these&lt;/a&gt; directions.&lt;/p&gt;

&lt;p&gt;Once installed, you can follow the Omega2 Cross-compiling tutorial found here (though we will do some modification to the image, so don’t really follow the linked tutorial).&lt;/p&gt;

&lt;p&gt;The basics I follow are:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker pull onion/omega2-source
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; onion/omega2-source /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will pull the Omega2 docker image and then create a docker instance. The instance only needs to be created once, e.g. you execute “docker run” for every unique instance you want to create.&lt;/p&gt;

&lt;p&gt;To exit docker, just type exit:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will shutdown the docker instance you just created.&lt;/p&gt;

&lt;p&gt;If you want to reconnect to the instance you created already, find the docker instance container ID, start that container, then attach the container to access the image.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker ps &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;#this will look up all the containers on your machine and list them. Copy the container ID you want to load&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker start &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;CONTAINER ID]
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker attach &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;NAME]  &lt;span class=&quot;c&quot;&gt;#you can use tab complete to auto fill in the container name once it is started.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After the attach command, you will be inside your docker image in your command line terminal.
Note: you might have to press enter to see the terminal input.&lt;/p&gt;

&lt;p&gt;As of June 2019, the Omega2 docker container initializes the git repo as lede-17.01. We want to be on the openwrt18.06 branch.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout openwrt-18.06
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git pull
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will switch us to the openwrt-18.06 branch as then pull the latest version.&lt;/p&gt;

&lt;p&gt;Now we need to pull all the Omega2 specific “feeds” for our OpenWRT build process. Feeds are the way OpenWRT pulls sources files for particular drivers/programs/features that can be compiled into our image. Run this with in the /source folder (default start folder):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bash scripts/onion-feed-setup.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This command will show you the version and build for the omega2 image:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python scripts/onion-setup-build.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we need to configure our image. Run the command below inside the /source folder (should be the default folder you start the container in):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make menuconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you get a build dependency error like below:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Build dependency: Please &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;GNU &lt;span class=&quot;s1&quot;&gt;'time'&lt;/span&gt; or BusyBox &lt;span class=&quot;s1&quot;&gt;'time'&lt;/span&gt; that supports &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run the following commands:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get update
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;#This should fix the nodejs error you will get if you try to install time right after update&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install time&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make menuconfig  &lt;span class=&quot;c&quot;&gt;#Run the config command again&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you should have a terminal input window like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/main_menu.png&quot; alt=&quot;main menu&quot; title=&quot;Main Menu&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: The config menu should be setup for compile for our Omega2 boards. If not, then something didn’t initialize well in the previous steps. Either delete your container and create it again. Or try to hack. I recommend starting the container over.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now navigate to “Network –&amp;gt;”, then “Routing and Redirection –&amp;gt;” and select “relayd” twice so that there is an astrix.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/relayd.png&quot; alt=&quot;Select Relayd&quot; title=&quot;Select Relayd&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, go back to the main menu screen and navigate to “Onion –&amp;gt;” then “Libraries –&amp;gt;”. Select the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;pyOnionGpio&lt;/li&gt;
  &lt;li&gt;pyOnionI2C&lt;/li&gt;
  &lt;li&gt;python-spidev&lt;/li&gt;
  &lt;li&gt;python3-onioin-i2c&lt;/li&gt;
  &lt;li&gt;python3-spidev&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your window should look this this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/libraries.png&quot; alt=&quot;Select Libraries&quot; title=&quot;Select Libraries&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, from the main menu navigate to “Languages –&amp;gt;” then “ Python –&amp;gt;”. Select the follow (you will have to scroll to find them):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;python-pip&lt;/li&gt;
  &lt;li&gt;python-pyserial&lt;/li&gt;
  &lt;li&gt;python3-pip&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have the pip lines highlighted in the images below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/python_pip.png&quot; alt=&quot;Python2&quot; title=&quot;Select Python2 Libraries&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/python_pip3.png&quot; alt=&quot;Python3&quot; title=&quot;Select Python3 Pip&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This should complete our image customization and we can exit the config menu. Make sure you select yes when you exit to save your configuration.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/exit_menu.png&quot; alt=&quot;Exit&quot; title=&quot;Make sure to select &amp;lt; Yes &amp;gt;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we can make our image.
Note: this can take quite a long time. Especially on the first compile.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once this completes, you can run an onion provided script to rename the generated bin file. Run this from the /souce folder:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python scripts/onion-setup-images.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There should now be a file located in /source/bin/targets/ramips/mt76x8/ call “omega2-[version number]-[build number].bin”&lt;/p&gt;

&lt;p&gt;To flash this .bin file onto the Omega2 board, you have several options. Since the file is located with in your Docker container, it is separate from your normal  file system. The quickest, though not easiest, would be to use curl’s file server feature. You can do this by using the following commands:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;--upload-file&lt;/span&gt; ./[file name] https://transfer.sh/[file name]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When writing this guide, my curl command was:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;--upload-file&lt;/span&gt; ./omega2p-v0.3.2-b222.bin https://transfer.sh/omega2p-v0.3.2-b222.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is the output from my Docker terminal:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/curl_transfer.png&quot; alt=&quot;Terminal Output&quot; title=&quot;Terminal Output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is complete, you will see a web address appended to the right of your terminal input line. You can now use wget on another computer to download the file. e.g.:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://transfer.sh/2aIYM/omega2p-v0.3.2-b222.bin  &lt;span class=&quot;c&quot;&gt;#This is the address I was using during the writing of this guide, copied from the terminal output from the image above.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you have an onion board with a working OS and/or internet access, you can follow &lt;a href=&quot;https://docs.onion.io/omega2-docs/manual-firmware-installation.html&quot;&gt;this&lt;/a&gt; tutorial to update the OS to the version you just compiled. Instead of downloading the bin from Onion’s website, use wget (demonstrated above) in the /tmp folder (or access the bin file from an SD card or USB drive, if possible).&lt;/p&gt;

&lt;p&gt;If you don’t have a working OS or internet access on the Omega2 board, you can wget the file onto a personal machine and upload the file using Onion’s USB instructions found &lt;a href=&quot;https://docs.onion.io/omega2-docs/Firmware-Flashing-from-USB-storage.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;USB instructions only work if you are using the Omega2 expansion board. You might be able to use an SD card, but this will require some hacking since no guide exists (yet).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You should now have an updated Omega2 board with our customized OS running the latest (at the time this guide was written) Omega OS version.&lt;/p&gt;</content><author><name></name></author><category term="SBv2" /><category term="Omega2" /><summary type="html">First you should install Docker. I am using ubuntu 18.04 LTS and installed docker-ce following these directions.</summary></entry></feed>