<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-06-06T10:52:55-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">SUPERball v2 Documentation</title><subtitle>Basic Documentation for my current work on the SUPERball v2 Project.</subtitle><entry><title type="html">Omega2 Swap File and Storage Expansion</title><link href="http://localhost:4000/2019/06/06/Omega2_Swap_and_Storage_Expansion.html" rel="alternate" type="text/html" title="Omega2 Swap File and Storage Expansion" /><published>2019-06-06T09:47:27-06:00</published><updated>2019-06-06T09:47:27-06:00</updated><id>http://localhost:4000/2019/06/06/Omega2_Swap_and_Storage_Expansion</id><content type="html" xml:base="http://localhost:4000/2019/06/06/Omega2_Swap_and_Storage_Expansion.html"></content><author><name></name></author><category term="SBv2" /><category term="Omega2" /><summary type="html"></summary></entry><entry><title type="html">Omega2 Bridging WiFi and Ethernet</title><link href="http://localhost:4000/2019/06/05/Omega2_Briding_WiFi_and_Ethernet.html" rel="alternate" type="text/html" title="Omega2 Bridging WiFi and Ethernet" /><published>2019-06-05T10:34:27-06:00</published><updated>2019-06-05T10:34:27-06:00</updated><id>http://localhost:4000/2019/06/05/Omega2_Briding_WiFi_and_Ethernet</id><content type="html" xml:base="http://localhost:4000/2019/06/05/Omega2_Briding_WiFi_and_Ethernet.html">&lt;blockquote&gt;
  &lt;p&gt;If you have not done so, you need to have the SBv2 custom image loaded onto you Omega2 board. Or at the very least, an image with &lt;b&gt;relayd&lt;/b&gt; installed.
You can find instructions on compiling and loading the custom image &lt;a href=&quot;/2019/06/04/Omega2_Docker_and_Image_Creation.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that these configurations might already be applied to your system if a custom version of our firmware is / was already installed on the Omega2 board. Check the network and wireless files on you system against the final version in this tutorial.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will be editing the Omega2’s configuration files to enable briding between the WiFi and ethernet port.
The files we will be editing are &lt;code class=&quot;highlighter-rouge&quot;&gt;network&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;wireless&lt;/code&gt; located in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/config/&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Please refer to &lt;a href=&quot;https://docs.onion.io/omega2-docs/&quot;&gt;Onion’s Omega2&lt;/a&gt; docs for how to connect to your Omega2 board, commands, and features. I would recommend you connect to the Omega2 through the Command Line interface.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;network-file&quot;&gt;Network File&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/config/network&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;An unmodified network file should look something like this:
&lt;img src=&quot;/assets/img/network_original.png&quot; alt=&quot;original network&quot; title=&quot;original network file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Leave the &lt;code class=&quot;highlighter-rouge&quot;&gt;'loopback'&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;'globals'&lt;/code&gt; configurations and change the rest of the file to look something like this:
&lt;img src=&quot;/assets/img/network_modified.png&quot; alt=&quot;modified network&quot; title=&quot;modified network file&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that you might need to change your &lt;code class=&quot;highlighter-rouge&quot;&gt;gateway&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;dns&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ipaddr&lt;/code&gt; settings to match your network’s settings.
Also, the &lt;code class=&quot;highlighter-rouge&quot;&gt;option hostname &quot;Omega-&quot;&lt;/code&gt; might have a 4 character string. No need to delete it like in the image above.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here are the configurations if you feel like copy and pasting them into your file:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config interface &lt;span class=&quot;s1&quot;&gt;'lan'&lt;/span&gt;
        option ifname &lt;span class=&quot;s1&quot;&gt;'eth0'&lt;/span&gt;
        option proto &lt;span class=&quot;s1&quot;&gt;'static'&lt;/span&gt;
        option gateway &lt;span class=&quot;s1&quot;&gt;'192.168.0.1'&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Should be your network's default Gateway  &lt;/span&gt;
        option dns &lt;span class=&quot;s1&quot;&gt;'192.168.0.1'&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Should be your network's default Gateway&lt;/span&gt;

config interface &lt;span class=&quot;s1&quot;&gt;'wwan'&lt;/span&gt;
        option ifname &lt;span class=&quot;s1&quot;&gt;'apcli0'&lt;/span&gt;
        option proto &lt;span class=&quot;s1&quot;&gt;'dhcp'&lt;/span&gt;
        option &lt;span class=&quot;nb&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Omega-'&lt;/span&gt;

config interface &lt;span class=&quot;s1&quot;&gt;'stabridge'&lt;/span&gt;
        option proto &lt;span class=&quot;s1&quot;&gt;'relay'&lt;/span&gt;
        option network &lt;span class=&quot;s1&quot;&gt;'lan wwan'&lt;/span&gt;
        option ipaddr &lt;span class=&quot;s1&quot;&gt;'192.168.0.140'&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#TODO: check if this needs to change for each Omega2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;wireless-file-optional&quot;&gt;Wireless File (optional)&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/config/wireless&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;An unmodified wireless file should look something like this:
&lt;img src=&quot;/assets/img/wireless_original.png&quot; alt=&quot;original wireless&quot; title=&quot;original wireless file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you already connected your Omega2 board to a network, then your &lt;code class=&quot;highlighter-rouge&quot;&gt;'sta'&lt;/code&gt; section might already be pre-populated with your network settings.&lt;/p&gt;

&lt;p&gt;If not, then populate your netowrk settings (key and ssid) as well as make sure you change&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;option disable '1'&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;option disable '0'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Your new wireless file should look something like this:
&lt;img src=&quot;/assets/img/wireless_modified.png&quot; alt=&quot;modified wireless&quot; title=&quot;modified wireless file&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note the &lt;code class=&quot;highlighter-rouge&quot;&gt;config wif-config&lt;/code&gt; sections are usually auto generated by the wifi manager. So you might have one or more of these for each different WiFi network you have connected with your Omega2 board.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;enable-relayd&quot;&gt;Enable Relayd&lt;/h3&gt;
&lt;p&gt;Once you have modified the &lt;code class=&quot;highlighter-rouge&quot;&gt;network&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;wireless&lt;/code&gt; files, relayd needs to be enabled.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/etc/init.d/relayd enabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should setup relayd to bridge your WiFi and ethernet port.&lt;/p&gt;

&lt;h3 id=&quot;disable-firewall&quot;&gt;Disable Firewall&lt;/h3&gt;
&lt;p&gt;Once relayd is setup and we have a bridge between our WiFi and ethernet, Hebi feedback messages might not be working. This is due to the Omega2’s firewall blocking traffic.
The easiest way to solve this is to disable the firewall all together.&lt;/p&gt;

&lt;p&gt;The firmware’s startup scripts are located in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/init.d/&lt;/code&gt; and there should be file named &lt;code class=&quot;highlighter-rouge&quot;&gt;firewall&lt;/code&gt;.
Disable this file using the command below:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/etc/init.d/firewall disable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For good measure (though probably not necessary), I also remove the file’s execute permission.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; /etc/init.d/firewall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now if you reboot the Omega2 board, it should startup and allow for Hebi’s feedback messages to transfer over the network.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: The feedback messages will take approximately 85 seconds (or the time for all startup scripts to finish) before they are recognized on the network. So be patient on initial boot up.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="SBv2" /><category term="Omega2" /><summary type="html">If you have not done so, you need to have the SBv2 custom image loaded onto you Omega2 board. Or at the very least, an image with relayd installed. You can find instructions on compiling and loading the custom image here.</summary></entry><entry><title type="html">Omega2 Docker and Image Creation</title><link href="http://localhost:4000/2019/06/04/Omega2_Docker_and_Image_Creation.html" rel="alternate" type="text/html" title="Omega2 Docker and Image Creation" /><published>2019-06-04T13:03:27-06:00</published><updated>2019-06-04T13:03:27-06:00</updated><id>http://localhost:4000/2019/06/04/Omega2_Docker_and_Image_Creation</id><content type="html" xml:base="http://localhost:4000/2019/06/04/Omega2_Docker_and_Image_Creation.html">&lt;p&gt;First you should install Docker. I am using ubuntu 18.04 LTS and installed docker-ce following &lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/ubuntu/&quot;&gt;these&lt;/a&gt; directions.&lt;/p&gt;

&lt;p&gt;Once installed, you can follow the Omega2 Cross-compiling tutorial found here (though we will do some modification to the image, so don’t really follow the linked tutorial).&lt;/p&gt;

&lt;p&gt;The basics I follow are:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker pull onion/omega2-source
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; onion/omega2-source /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will pull the Omega2 docker image and then create a docker instance. The instance only needs to be created once, e.g. you execute “docker run” for every unique instance you want to create.&lt;/p&gt;

&lt;p&gt;To exit docker, just type exit:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will shutdown the docker instance you just created.&lt;/p&gt;

&lt;p&gt;If you want to reconnect to the instance you created already, find the docker instance container ID, start that container, then attach the container to access the image.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker ps &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;#this will look up all the containers on your machine and list them. Copy the container ID you want to load&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker start &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;CONTAINER ID]
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker attach &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;NAME]  &lt;span class=&quot;c&quot;&gt;#you can use tab complete to auto fill in the container name once it is started.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After the attach command, you will be inside your docker image in your command line terminal.
Note: you might have to press enter to see the terminal input.&lt;/p&gt;

&lt;p&gt;As of June 2019, the Omega2 docker container initializes the git repo as lede-17.01. We want to be on the openwrt18.06 branch.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout openwrt-18.06
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git pull
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will switch us to the openwrt-18.06 branch as then pull the latest version.&lt;/p&gt;

&lt;p&gt;Now we need to pull all the Omega2 specific “feeds” for our OpenWRT build process. Feeds are the way OpenWRT pulls sources files for particular drivers/programs/features that can be compiled into our image. Run this with in the /source folder (default start folder):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bash scripts/onion-feed-setup.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This command will show you the version and build for the omega2 image:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python scripts/onion-setup-build.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we need to configure our image. Run the command below inside the /source folder (should be the default folder you start the container in):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make menuconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you get a build dependency error like below:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Build dependency: Please &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;GNU &lt;span class=&quot;s1&quot;&gt;'time'&lt;/span&gt; or BusyBox &lt;span class=&quot;s1&quot;&gt;'time'&lt;/span&gt; that supports &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run the following commands:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get update
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;#This should fix the nodejs error you will get if you try to install time right after update&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install time&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make menuconfig  &lt;span class=&quot;c&quot;&gt;#Run the config command again&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you should have a terminal input window like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/main_menu.png&quot; alt=&quot;main menu&quot; title=&quot;Main Menu&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: The config menu should be setup for compile for our Omega2 boards. If not, then something didn’t initialize well in the previous steps. Either delete your container and create it again. Or try to hack. I recommend starting the container over.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now navigate to “Network –&amp;gt;”, then “Routing and Redirection –&amp;gt;” and select “relayd” twice so that there is an astrix.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/relayd.png&quot; alt=&quot;Select Relayd&quot; title=&quot;Select Relayd&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, go back to the main menu screen and navigate to “Onion –&amp;gt;” then “Libraries –&amp;gt;”. Select the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;pyOnionGpio&lt;/li&gt;
  &lt;li&gt;pyOnionI2C&lt;/li&gt;
  &lt;li&gt;python-spidev&lt;/li&gt;
  &lt;li&gt;python3-onioin-i2c&lt;/li&gt;
  &lt;li&gt;python3-spidev&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your window should look this this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/libraries.png&quot; alt=&quot;Select Libraries&quot; title=&quot;Select Libraries&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, from the main menu navigate to “Languages –&amp;gt;” then “ Python –&amp;gt;”. Select the follow (you will have to scroll to find them):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;python-pip&lt;/li&gt;
  &lt;li&gt;python-pyserial&lt;/li&gt;
  &lt;li&gt;python3-pip&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have the pip lines highlighted in the images below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/python_pip.png&quot; alt=&quot;Python2&quot; title=&quot;Select Python2 Libraries&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/python_pip3.png&quot; alt=&quot;Python3&quot; title=&quot;Select Python3 Pip&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This should complete our image customization and we can exit the config menu. Make sure you select yes when you exit to save your configuration.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/exit_menu.png&quot; alt=&quot;Exit&quot; title=&quot;Make sure to select &amp;lt; Yes &amp;gt;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we can make our image.
Note: this can take quite a long time. Especially on the first compile.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once this completes, you can run an onion provided script to rename the generated bin file. Run this from the /souce folder:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python scripts/onion-setup-images.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There should now be a file located in /source/bin/targets/ramips/mt76x8/ call “omega2-[version number]-[build number].bin”&lt;/p&gt;

&lt;p&gt;To flash this .bin file onto the Omega2 board, you have several options. Since the file is located with in your Docker container, it is separate from your normal  file system. The quickest, though not easiest, would be to use curl’s file server feature. You can do this by using the following commands:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;--upload-file&lt;/span&gt; ./[file name] https://transfer.sh/[file name]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When writing this guide, my curl command was:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;--upload-file&lt;/span&gt; ./omega2p-v0.3.2-b222.bin https://transfer.sh/omega2p-v0.3.2-b222.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is the output from my Docker terminal:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/curl_transfer.png&quot; alt=&quot;Terminal Output&quot; title=&quot;Terminal Output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this is complete, you will see a web address appended to the right of your terminal input line. You can now use wget on another computer to download the file. e.g.:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://transfer.sh/2aIYM/omega2p-v0.3.2-b222.bin  &lt;span class=&quot;c&quot;&gt;#This is the address I was using during the writing of this guide, copied from the terminal output from the image above.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you have an onion board with a working OS and/or internet access, you can follow &lt;a href=&quot;https://docs.onion.io/omega2-docs/manual-firmware-installation.html&quot;&gt;this&lt;/a&gt; tutorial to update the OS to the version you just compiled. Instead of downloading the bin from Onion’s website, use wget (demonstrated above) in the /tmp folder (or access the bin file from an SD card or USB drive, if possible).&lt;/p&gt;

&lt;p&gt;If you don’t have a working OS or internet access on the Omega2 board, you can wget the file onto a personal machine and upload the file using Onion’s USB instructions found &lt;a href=&quot;https://docs.onion.io/omega2-docs/Firmware-Flashing-from-USB-storage.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;USB instructions only work if you are using the Omega2 expansion board. You might be able to use an SD card, but this will require some hacking since no guide exists (yet).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You should now have an updated Omega2 board with our customized OS running the latest (at the time this guide was written) Omega OS version.&lt;/p&gt;</content><author><name></name></author><category term="SBv2" /><category term="Omega2" /><summary type="html">First you should install Docker. I am using ubuntu 18.04 LTS and installed docker-ce following these directions.</summary></entry></feed>